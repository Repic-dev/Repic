'use client';

import Image from 'next/image';
import { ThumbsUp, ThumbsDown, Copy as CopyIcon, Check } from 'lucide-react';
import { Button } from '@/components/ui/button';
import type { SearchResult } from '@/types/types';

interface SearchResultsProps {
  results: SearchResult[];
  copiedId: string | null;
  onDownload: (result: SearchResult) => void;
  onCopy: (result: SearchResult) => void;
  onLike: (result: SearchResult) => void;
  onDislike: (result: SearchResult) => void;
}

export function SearchResults({
  results,
  copiedId,
  onDownload,
  onCopy,
  onLike,
  onDislike,
}: SearchResultsProps) {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
      {results.map((result) => (
        <div
          key={result.id}
          className="group bg-white dark:bg-gray-800 rounded-3xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 hover:-translate-y-1 border border-gray-100 dark:border-gray-700"
        >
          {/* 画像エリア */}
          <div className="relative h-64 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 overflow-hidden">
            <Image
              src={result.imageUrl}
              alt="検索結果の画像"
              fill
              className="object-cover group-hover:scale-105 transition-transform duration-300"
            />
            {/* グラデーションオーバーレイ */}
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            
            {/* ダウンロードボタン */}
            <button
              onClick={() => onDownload(result)}
              className="absolute bottom-4 right-4 w-10 h-10 bg-white/90 hover:bg-white rounded-full flex items-center justify-center shadow-lg transition-all duration-200 hover:scale-110 backdrop-blur-sm"
            >
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                <path d="M10 3V13M10 13L6 9M10 13L14 9M3 17H17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
          </div>

          {/* コンテンツエリア */}
          <div className="p-6">
            {/* ユーザー情報 */}
            {result.profileId && result.displayName && (
              <div className="flex items-center gap-2 mb-3">
                <div className="w-6 h-6 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-xs font-bold">
                    {result.displayName.charAt(0).toUpperCase()}
                  </span>
                </div>
                <p className="text-black text-sm">
                  generated by {result.displayName}
                </p>
              </div>
            )}

            {/* プロンプト */}
            <div className="mt-4 pt-4 mb-6 border-t border-gray-100 dark:border-gray-700">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <h3 className="text-sm font-semibold text-black uppercase tracking-wide">
                    生成プロンプト
                  </h3>
                  <Button
                    onClick={() => onCopy(result)}
                    variant="outline"
                    size="icon"
                    className={`h-8 w-8 rounded-full transition-all duration-200 ${
                      copiedId === result.id
                        ? 'border-green-500 bg-green-50 text-green-600 dark:bg-green-900/20 scale-105'
                        : 'hover:bg-gray-50 hover:border-gray-300'
                    }`}
                    title={copiedId === result.id ? 'コピーしました！' : 'プロンプトをコピー'}
                  >
                    {copiedId === result.id ? (
                      <Check className="h-3 w-3" />
                    ) : (
                      <CopyIcon className="h-3 w-3" />
                    )}
                  </Button>
                </div>
                <div className="flex items-center gap-1">
                  <Button
                    onClick={() => onLike(result)}
                    variant="outline"
                    size="icon"
                    className="h-8 w-8 rounded-full hover:bg-green-50 hover:border-green-500 hover:text-green-600 dark:hover:bg-green-900/20 transition-all duration-200"
                    title="いいね"
                  >
                    <ThumbsUp className="h-3 w-3" />
                  </Button>
                  <Button
                    onClick={() => onDislike(result)}
                    variant="outline"
                    size="icon"
                    className="h-8 w-8 rounded-full hover:bg-red-50 hover:border-red-500 hover:text-red-600 dark:hover:bg-red-900/20 transition-all duration-200"
                    title="良くない"
                  >
                    <ThumbsDown className="h-3 w-3" />
                  </Button>
                </div>
              </div>
              <p className="text-gray-500 dark:text-gray-200 leading-relaxed text-sm line-clamp-3">
                {result.prompt}
              </p>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
